import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Alert, AlertDescription } from '@/components/ui/alert';
import Icon from '@/components/ui/icon';

const SignsSection = () => {
  const [currentTest, setCurrentTest] = useState(0);
  const [testScore, setTestScore] = useState(0);
  const [showResults, setShowResults] = useState(false);
  const [selectedAnswers, setSelectedAnswers] = useState<number[]>([]);

  const recognitionTest = [
    {
      question: "–ö–∞–∫–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–π –∑–∞–ø–∞—Ö –∏–º–µ–µ—Ç —Ö–ª–æ—Ä?",
      options: ["–°–ª–∞–¥–∫–∏–π", "–†–µ–∑–∫–∏–π —Ö–ª–æ—Ä–Ω—ã–π", "–ë–µ–∑ –∑–∞–ø–∞—Ö–∞", "–ö–∏—Å–ª—ã–π"],
      correct: 1,
      explanation: "–•–ª–æ—Ä –∏–º–µ–µ—Ç —Ä–µ–∑–∫–∏–π, —Ä–∞–∑–¥—Ä–∞–∂–∞—é—â–∏–π –∑–∞–ø–∞—Ö, –ø–æ—Ö–æ–∂–∏–π –Ω–∞ —Ö–ª–æ—Ä–∫—É"
    },
    {
      question: "–ö–∞–∫–æ–≥–æ —Ü–≤–µ—Ç–∞ –¥—ã–º –ø—Ä–∏ —É—Ç–µ—á–∫–µ —Ö–ª–æ—Ä–∞?",
      options: ["–ë–µ–ª—ã–π", "–ß–µ—Ä–Ω—ã–π", "–ñ–µ–ª—Ç–æ–≤–∞—Ç–æ-–∑–µ–ª–µ–Ω—ã–π", "–°–∏–Ω–∏–π"],
      correct: 2,
      explanation: "–•–ª–æ—Ä –æ–±—Ä–∞–∑—É–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–π –∂–µ–ª—Ç–æ–≤–∞—Ç–æ-–∑–µ–ª–µ–Ω—ã–π –¥—ã–º"
    },
    {
      question: "–ü–µ—Ä–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –æ—Ç—Ä–∞–≤–ª–µ–Ω–∏—è —Ö–ª–æ—Ä–æ–º:",
      options: ["–ì–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å", "–ö–∞—à–µ–ª—å –∏ —Å–ª–µ–∑–æ—Ç–µ—á–µ–Ω–∏–µ", "–¢–æ—à–Ω–æ—Ç–∞", "–í—Å–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–µ"],
      correct: 3,
      explanation: "–•–ª–æ—Ä –ø–æ—Ä–∞–∂–∞–µ—Ç –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏ –∏ –≥–ª–∞–∑–∞, –≤—ã–∑—ã–≤–∞—è –∫–æ–º–ø–ª–µ–∫—Å —Å–∏–º–ø—Ç–æ–º–æ–≤"
    }
  ];

  const handleTestAnswer = (answerIndex: number) => {
    const newAnswers = [...selectedAnswers];
    newAnswers[currentTest] = answerIndex;
    setSelectedAnswers(newAnswers);

    if (answerIndex === recognitionTest[currentTest].correct) {
      setTestScore(testScore + 1);
    }

    if (currentTest < recognitionTest.length - 1) {
      setTimeout(() => setCurrentTest(currentTest + 1), 1500);
    } else {
      setTimeout(() => setShowResults(true), 1500);
    }
  };

  const resetTest = () => {
    setCurrentTest(0);
    setTestScore(0);
    setShowResults(false);
    setSelectedAnswers([]);
  };

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center space-x-2">
            <Icon name="Eye" size={24} />
            <span>–ü—Ä–∏–∑–Ω–∞–∫–∏ —É—Ç–µ—á–∫–∏ —Ö–ª–æ—Ä–∞</span>
          </CardTitle>
          <CardDescription>
            –ù–∞—É—á–∏—Ç–µ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –æ–ø–∞—Å–Ω–æ—Å—Ç—å –Ω–∞ —Ä–∞–Ω–Ω–µ–π —Å—Ç–∞–¥–∏–∏
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid md:grid-cols-2 gap-6">
            <div>
              <img 
                src="/img/134b9d46-3c9f-4b7f-8908-0de7239fcfd1.jpg" 
                alt="–£—Ç–µ—á–∫–∞ —Ö–ª–æ—Ä–∞"
                className="w-full rounded-lg mb-4"
              />
            </div>
            <div className="space-y-4">
              <div className="flex items-start space-x-3">
                <Badge variant="destructive">!</Badge>
                <div>
                  <h4 className="font-semibold">–†–µ–∑–∫–∏–π –∑–∞–ø–∞—Ö —Ö–ª–æ—Ä–∫–∏</h4>
                  <p className="text-sm text-gray-600">–•–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–π –µ–¥–∫–∏–π –∑–∞–ø–∞—Ö, –¥–∞–∂–µ –≤ –º–∞–ª—ã—Ö –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è—Ö</p>
                </div>
              </div>
              <div className="flex items-start space-x-3">
                <Badge className="bg-yellow-500">!</Badge>
                <div>
                  <h4 className="font-semibold">–ñ–µ–ª—Ç–æ–≤–∞—Ç–æ-–∑–µ–ª–µ–Ω—ã–π –¥—ã–º</h4>
                  <p className="text-sm text-gray-600">–•–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–π —Ü–≤–µ—Ç –æ–±–ª–∞–∫–∞ —Ö–ª–æ—Ä–∞</p>
                </div>
              </div>
              <div className="flex items-start space-x-3">
                <Badge variant="secondary">!</Badge>
                <div>
                  <h4 className="font-semibold">–ö–∞—à–µ–ª—å —É –ª—é–¥–µ–π</h4>
                  <p className="text-sm text-gray-600">–†–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π</p>
                </div>
              </div>
              <div className="flex items-start space-x-3">
                <Badge variant="outline">!</Badge>
                <div>
                  <h4 className="font-semibold">–ó–≤—É–∫–∏ —Å–∏—Ä–µ–Ω</h4>
                  <p className="text-sm text-gray-600">–°–∏–≥–Ω–∞–ª—ã —Ö–∏–º–∏—á–µ—Å–∫–æ–π —Ç—Ä–µ–≤–æ–≥–∏</p>
                </div>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç */}
      <Card>
        <CardHeader>
          <CardTitle>–¢–µ—Å—Ç: –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤</CardTitle>
          <CardDescription>
            –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è ({currentTest + 1} –∏–∑ {recognitionTest.length})
          </CardDescription>
        </CardHeader>
        <CardContent>
          {!showResults ? (
            <div className="space-y-4">
              <Progress value={(currentTest / recognitionTest.length) * 100} />
              <div className="p-4 bg-gray-50 rounded-lg">
                <h4 className="font-semibold mb-3">{recognitionTest[currentTest].question}</h4>
                <div className="grid grid-cols-1 gap-2">
                  {recognitionTest[currentTest].options.map((option, index) => (
                    <Button
                      key={index}
                      variant={selectedAnswers[currentTest] === index ? 
                        (index === recognitionTest[currentTest].correct ? "default" : "destructive") : 
                        "outline"
                      }
                      onClick={() => handleTestAnswer(index)}
                      disabled={selectedAnswers[currentTest] !== undefined}
                      className="justify-start text-left"
                    >
                      {option}
                    </Button>
                  ))}
                </div>
                {selectedAnswers[currentTest] !== undefined && (
                  <Alert className="mt-4">
                    <Icon name="Info" className="h-4 w-4" />
                    <AlertDescription>
                      {recognitionTest[currentTest].explanation}
                    </AlertDescription>
                  </Alert>
                )}
              </div>
            </div>
          ) : (
            <div className="text-center space-y-4">
              <div className="text-6xl">{testScore === recognitionTest.length ? "üéâ" : "üìö"}</div>
              <h3 className="text-xl font-bold">
                –†–µ–∑—É–ª—å—Ç–∞—Ç: {testScore} –∏–∑ {recognitionTest.length}
              </h3>
              <p className="text-gray-600">
                {testScore === recognitionTest.length 
                  ? "–û—Ç–ª–∏—á–Ω–æ! –í—ã –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—é –æ–ø–∞—Å–Ω–æ—Å—Ç–∏" 
                  : "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª"}
              </p>
              <Button onClick={resetTest}>–ü—Ä–æ–π—Ç–∏ –µ—â–µ —Ä–∞–∑</Button>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
};

export default SignsSection;