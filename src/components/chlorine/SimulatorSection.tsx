import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';

const SimulatorSection = () => {
  const [simulatorStep, setSimulatorStep] = useState(0);
  const [simulatorScore, setSimulatorScore] = useState(0);

  const simulatorScenario = [
    {
      situation: "–í—ã —É—Å–ª—ã—à–∞–ª–∏ —Å–∏—Ä–µ–Ω—É —Ö–∏–º–∏—á–µ—Å–∫–æ–π —Ç—Ä–µ–≤–æ–≥–∏ –∏ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª–∏ —Ä–µ–∑–∫–∏–π –∑–∞–ø–∞—Ö —Ö–ª–æ—Ä–∫–∏",
      options: [
        "–í—ã–π—Ç–∏ –Ω–∞ —É–ª–∏—Ü—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç",
        "–ó–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–∞ –∏ –¥–≤–µ—Ä–∏, –≤–∫–ª—é—á–∏—Ç—å —Ä–∞–¥–∏–æ/–¢–í",
        "–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–æ–∫–∏–Ω—É—Ç—å –∑–¥–∞–Ω–∏–µ"
      ],
      correct: 1,
      points: 10,
      feedback: "–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ü–µ—Ä–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ - –∏–∑–æ–ª–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"
    },
    {
      situation: "–ü–æ —Ä–∞–¥–∏–æ –æ–±—ä—è–≤–∏–ª–∏ –æ–± –∞–≤–∞—Ä–∏–∏ –Ω–∞ —Ö–∏–º–∑–∞–≤–æ–¥–µ. –í–µ—Ç–µ—Ä –¥—É–µ—Ç –≤ –≤–∞—à—É —Å—Ç–æ—Ä–æ–Ω—É",
      options: [
        "–û—Å—Ç–∞—Ç—å—Å—è –¥–æ–º–∞ –∏ –∂–¥–∞—Ç—å",
        "–≠–≤–∞–∫—É–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –≤–µ—Ç—Ä–∞",
        "–î–≤–∏–≥–∞—Ç—å—Å—è –ø—Ä–æ—Ç–∏–≤ –≤–µ—Ç—Ä–∞"
      ],
      correct: 1,
      points: 15,
      feedback: "–í–µ—Ä–Ω–æ! –≠–≤–∞–∫—É–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –≤–µ—Ç—Ä–∞"
    },
    {
      situation: "–ü—Ä–∏ —ç–≤–∞–∫—É–∞—Ü–∏–∏ –≤—ã –≤–∏–¥–∏—Ç–µ –ø–æ—Å—Ç—Ä–∞–¥–∞–≤—à–µ–≥–æ —Å –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏ –æ—Ç—Ä–∞–≤–ª–µ–Ω–∏—è —Ö–ª–æ—Ä–æ–º",
      options: [
        "–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å –Ω–∞ –º–µ—Å—Ç–µ",
        "–í—ã–Ω–µ—Å—Ç–∏ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –º–µ—Å—Ç–æ, –∑–∞—Ç–µ–º –æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å",
        "–í—ã–∑–≤–∞—Ç—å —Å–ø–∞—Å–∞—Ç–µ–ª–µ–π –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —ç–≤–∞–∫—É–∞—Ü–∏—é"
      ],
      correct: 1,
      points: 20,
      feedback: "–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –ø–æ—Å—Ç—Ä–∞–¥–∞–≤—à–µ–≥–æ –∏–∑ –∑–æ–Ω—ã –ø–æ—Ä–∞–∂–µ–Ω–∏—è"
    }
  ];

  const handleSimulatorChoice = (choiceIndex: number) => {
    if (choiceIndex === simulatorScenario[simulatorStep].correct) {
      setSimulatorScore(simulatorScore + simulatorScenario[simulatorStep].points);
    }

    if (simulatorStep < simulatorScenario.length - 1) {
      setTimeout(() => setSimulatorStep(simulatorStep + 1), 2000);
    }
  };

  const resetSimulator = () => {
    setSimulatorStep(0);
    setSimulatorScore(0);
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle>–°–∏–º—É–ª—è—Ç–æ—Ä —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏</CardTitle>
        <CardDescription>
          –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π ‚Ä¢ –û—á–∫–∏: {simulatorScore}
        </CardDescription>
      </CardHeader>
      <CardContent>
        {simulatorStep < simulatorScenario.length ? (
          <div className="space-y-4">
            <Progress value={(simulatorStep / simulatorScenario.length) * 100} />
            <div className="p-6 bg-yellow-50 border border-yellow-200 rounded-lg">
              <h4 className="font-semibold text-lg mb-4">
                –°–∏—Ç—É–∞—Ü–∏—è {simulatorStep + 1}:
              </h4>
              <p className="mb-6 text-gray-700">
                {simulatorScenario[simulatorStep].situation}
              </p>
              <div className="space-y-3">
                {simulatorScenario[simulatorStep].options.map((option, index) => (
                  <Button
                    key={index}
                    variant="outline"
                    onClick={() => handleSimulatorChoice(index)}
                    className="w-full justify-start text-left p-4 h-auto"
                  >
                    <span className="mr-3 font-semibold">{String.fromCharCode(65 + index)}.</span>
                    {option}
                  </Button>
                ))}
              </div>
            </div>
          </div>
        ) : (
          <div className="text-center space-y-6">
            <div className="text-6xl">
              {simulatorScore >= 35 ? "üèÜ" : simulatorScore >= 25 ? "ü•à" : "üìñ"}
            </div>
            <div>
              <h3 className="text-2xl font-bold mb-2">–°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</h3>
              <p className="text-lg">–ù–∞–±—Ä–∞–Ω–æ –æ—á–∫–æ–≤: {simulatorScore} –∏–∑ 45</p>
              <Badge 
                variant={simulatorScore >= 35 ? "default" : simulatorScore >= 25 ? "secondary" : "destructive"}
                className="mt-2"
              >
                {simulatorScore >= 35 ? "–û—Ç–ª–∏—á–Ω–æ" : simulatorScore >= 25 ? "–•–æ—Ä–æ—à–æ" : "–¢—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è"}
              </Badge>
            </div>
            <Button onClick={resetSimulator}>–ü—Ä–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ</Button>
          </div>
        )}
      </CardContent>
    </Card>
  );
};

export default SimulatorSection;